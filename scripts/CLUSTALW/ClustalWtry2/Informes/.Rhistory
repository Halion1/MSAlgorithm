# Obtener la lista de archivos en la carpeta
archivos <- list.files(path = carpeta, pattern = ".json", full.names = TRUE)
# Crear una table para almacenar los datos de los archivos JSON
datos_alineamientos <- data.frame()
# Iterar sobre cada archivo y leer su contenido JSON
for (archivo in archivos) {
# Leer el contenido del archivo JSON
contenido <- read_json(archivo)
contenido$Alineamiento$num <- length(contenido$Cadenas)
nuevos_datos_df <- as.data.frame(contenido$Alineamiento)
nuevos_datos_df$Data = list(unlist(lapply(contenido$Cadenas, function(x) x[[1]])))
datos_alineamientos<-rbind(nuevos_datos_df,datos_alineamientos)
}
datos_alineamientos_raw<-datos_alineamientos
datos_alineamientos <-subset(datos_alineamientos, num == 19) #<- Filtro
datos_alineamientos_n <- datos_alineamientos[,c("Tiempo","Score","Long","num","Frac")]
esta_grup <- describeBy(datos_alineamientos_n,datos_alineamientos_n$Frac)
esta_grup
# Indexado Estadistico
# esta_grup_tiempo[["5"]][["sd"]]
generar_value_vector <- function(esta_grup,estadistico, lista,variable) {
# Crear un vector para almacenar los valores
value_vector <- numeric(length(lista))
j <-1
# Iterar desde 'start' hasta 'end'
for (i in lista) {
# Obtener el valor mean correspondiente
value_vector[j] <- esta_grup[[as.character(i)]][[estadistico]][variable]
j <-j+1
}
return(value_vector)
}
estadi_tiempo <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),1),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),1)
)
estadi_tiempo<-estadi_tiempo[order(estadi_tiempo$name),]
ggplot(estadi_tiempo) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\nPorcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nTiempo (seg)\n") +
ggtitle(" Tiempo de procesamiento computacional creciente con el porcentaje de la longitud de secuencias \n")+
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
estadi_score <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),2),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),2)
)
estadi_score <- estadi_score[order(estadi_score$name),]
ggplot(estadi_score) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_text(aes(x = name, y = value, label = round(value, 2)), vjust = -0.5) +
xlab("%") +
ylab("Score")
estadi_score
sd(estadi_score$value)
temporal = unique(datos_alineamientos[,c("Frac","Data")])
temporal <- temporal[order(temporal$Frac),]
estadisticos_longitudes_cadenas <- lapply(temporal$Data, function(sublistarow) {
sublista <-sublistarow
# Calcular promedio y desviación estándar de la sublista
promedio <- mean(sublista)
desviacion_estandar <- sd(sublista)
var <-var(sublista)
c(0,promedio,desviacion_estandar,var)
})
estadisticos_longitudes_cadenas <-do.call(rbind, estadisticos_longitudes_cadenas)
estadi_longitud <- data.frame(
name=unique(temporal$Frac),
value=estadisticos_longitudes_cadenas[,2],
sd=estadisticos_longitudes_cadenas[,3],
var=estadisticos_longitudes_cadenas[,4]
)
ggplot(estadi_longitud) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\n Porcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nLongitud de la secuencia\n") +
ggtitle(" Longitud de las secuencias creciente frente al aumento porcentual de la longitud\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
tiempo_longitud<-merge(estadi_longitud, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_longitud, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nLongitud de la secuencia \n")+
ggtitle("       Tiempo computacional creciente a mayor porcentaje de longitud de secuencia\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
#sd
ggplot(data = tiempo_longitud, aes(x=sd.x, y=value.y))+
geom_line()+
geom_point()+
ylab("\nTiempo (mean)\n") +
xlab("Longitud (sd)")
#Varianza
ggplot(data = tiempo_longitud, aes(x=var, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nVariabilidad porcentual de la longitud máxima de secuencias (%)\n") +
ggtitle("     Tiempo computacional creciente a mayor variabilidad porcentual de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
tiempo_score<-merge(estadi_score, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_score, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nScore (unidad arbitrária) \n")+
ggtitle("Tiempo computacional creciente frente a menores valores de score correspondientes al porcentaje de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=8, face="bold.italic"))
library(jsonlite)
library(psych)
library(ggplot2)
# Ruta a la carpeta que contiene los archivos JSON
carpeta <- "Porcentual"
# Obtener la lista de archivos en la carpeta
archivos <- list.files(path = carpeta, pattern = ".json", full.names = TRUE)
# Crear una table para almacenar los datos de los archivos JSON
datos_alineamientos <- data.frame()
# Iterar sobre cada archivo y leer su contenido JSON
for (archivo in archivos) {
# Leer el contenido del archivo JSON
contenido <- read_json(archivo)
contenido$Alineamiento$num <- length(contenido$Cadenas)
nuevos_datos_df <- as.data.frame(contenido$Alineamiento)
nuevos_datos_df$Data = list(unlist(lapply(contenido$Cadenas, function(x) x[[1]])))
datos_alineamientos<-rbind(nuevos_datos_df,datos_alineamientos)
}
datos_alineamientos_raw<-datos_alineamientos
datos_alineamientos <-subset(datos_alineamientos, num == 19) #<- Filtro
datos_alineamientos_n <- datos_alineamientos[,c("Tiempo","Score","Long","num","Frac")]
esta_grup <- describeBy(datos_alineamientos_n,datos_alineamientos_n$Frac)
esta_grup
# Indexado Estadistico
# esta_grup_tiempo[["5"]][["sd"]]
generar_value_vector <- function(esta_grup,estadistico, lista,variable) {
# Crear un vector para almacenar los valores
value_vector <- numeric(length(lista))
j <-1
# Iterar desde 'start' hasta 'end'
for (i in lista) {
# Obtener el valor mean correspondiente
value_vector[j] <- esta_grup[[as.character(i)]][[estadistico]][variable]
j <-j+1
}
return(value_vector)
}
estadi_tiempo <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),1),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),1)
)
estadi_tiempo<-estadi_tiempo[order(estadi_tiempo$name),]
ggplot(estadi_tiempo) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\nPorcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nTiempo (seg)\n") +
ggtitle(" Tiempo de procesamiento computacional creciente con el porcentaje de la longitud de secuencias \n")+
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
estadi_score <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),2),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),2)
)
estadi_score <- estadi_score[order(estadi_score$name),]
ggplot(estadi_score) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_text(aes(x = name, y = value, label = round(value, 2)), vjust = -0.5) +
xlab("%") +
ylab("Score")
estadi_score
sd(estadi_score$value)
temporal = unique(datos_alineamientos[,c("Frac","Data")])
temporal <- temporal[order(temporal$Frac),]
estadisticos_longitudes_cadenas <- lapply(temporal$Data, function(sublistarow) {
sublista <-sublistarow
# Calcular promedio y desviación estándar de la sublista
promedio <- mean(sublista)
desviacion_estandar <- sd(sublista)
var <-var(sublista)
c(0,promedio,desviacion_estandar,var)
})
estadisticos_longitudes_cadenas <-do.call(rbind, estadisticos_longitudes_cadenas)
estadi_longitud <- data.frame(
name=unique(temporal$Frac),
value=estadisticos_longitudes_cadenas[,2],
sd=estadisticos_longitudes_cadenas[,3],
var=estadisticos_longitudes_cadenas[,4]
)
ggplot(estadi_longitud) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\n Porcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nLongitud de la secuencia\n") +
ggtitle(" Longitud de las secuencias creciente frente al aumento porcentual de la longitud\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
tiempo_longitud<-merge(estadi_longitud, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_longitud, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nLongitud de la secuencia \n")+
ggtitle("       Tiempo computacional creciente a mayor porcentaje de longitud de secuencia\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
#sd
ggplot(data = tiempo_longitud, aes(x=sd.x, y=value.y))+
geom_line()+
geom_point()+
ylab("\nTiempo (mean)\n") +
xlab("Longitud (sd)")
#Varianza
ggplot(data = tiempo_longitud, aes(x=var, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nVariabilidad porcentual de la longitud máxima de secuencias (%)\n") +
ggtitle("     Tiempo computacional creciente a mayor variabilidad porcentual de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
tiempo_score<-merge(estadi_score, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_score, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nScore (unidad arbitrária) \n")+
ggtitle("Tiempo computacional creciente frente a menores valores de score correspondientes al porcentaje de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=8, face="bold.italic"))
library(jsonlite)
library(psych)
library(ggplot2)
# Ruta a la carpeta que contiene los archivos JSON
carpeta <- "Porcentual"
# Obtener la lista de archivos en la carpeta
archivos <- list.files(path = carpeta, pattern = ".json", full.names = TRUE)
# Crear una table para almacenar los datos de los archivos JSON
datos_alineamientos <- data.frame()
# Iterar sobre cada archivo y leer su contenido JSON
for (archivo in archivos) {
# Leer el contenido del archivo JSON
contenido <- read_json(archivo)
contenido$Alineamiento$num <- length(contenido$Cadenas)
nuevos_datos_df <- as.data.frame(contenido$Alineamiento)
nuevos_datos_df$Data = list(unlist(lapply(contenido$Cadenas, function(x) x[[1]])))
datos_alineamientos<-rbind(nuevos_datos_df,datos_alineamientos)
}
datos_alineamientos_raw<-datos_alineamientos
datos_alineamientos <-subset(datos_alineamientos, num == 19) #<- Filtro
datos_alineamientos_n <- datos_alineamientos[,c("Tiempo","Score","Long","num","Frac")]
esta_grup <- describeBy(datos_alineamientos_n,datos_alineamientos_n$Frac)
esta_grup
# Indexado Estadistico
# esta_grup_tiempo[["5"]][["sd"]]
generar_value_vector <- function(esta_grup,estadistico, lista,variable) {
# Crear un vector para almacenar los valores
value_vector <- numeric(length(lista))
j <-1
# Iterar desde 'start' hasta 'end'
for (i in lista) {
# Obtener el valor mean correspondiente
value_vector[j] <- esta_grup[[as.character(i)]][[estadistico]][variable]
j <-j+1
}
return(value_vector)
}
estadi_tiempo <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),1),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),1)
)
estadi_tiempo<-estadi_tiempo[order(estadi_tiempo$name),]
ggplot(estadi_tiempo) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\nPorcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nTiempo (seg)\n") +
ggtitle(" Tiempo de procesamiento computacional creciente con el porcentaje de la longitud de secuencias \n")+
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
estadi_score <- data.frame(
name=unique(datos_alineamientos_n$Frac),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$Frac),2),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$Frac),2)
)
estadi_score <- estadi_score[order(estadi_score$name),]
ggplot(estadi_score) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_text(aes(x = name, y = value, label = round(value, 2)), vjust = -0.5) +
xlab("%") +
ylab("Score")
estadi_score
sd(estadi_score$value)
temporal = unique(datos_alineamientos[,c("Frac","Data")])
temporal <- temporal[order(temporal$Frac),]
estadisticos_longitudes_cadenas <- lapply(temporal$Data, function(sublistarow) {
sublista <-sublistarow
# Calcular promedio y desviación estándar de la sublista
promedio <- mean(sublista)
desviacion_estandar <- sd(sublista)
var <-var(sublista)
c(0,promedio,desviacion_estandar,var)
})
estadisticos_longitudes_cadenas <-do.call(rbind, estadisticos_longitudes_cadenas)
estadi_longitud <- data.frame(
name=unique(temporal$Frac),
value=estadisticos_longitudes_cadenas[,2],
sd=estadisticos_longitudes_cadenas[,3],
var=estadisticos_longitudes_cadenas[,4]
)
ggplot(estadi_longitud) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\n Porcentaje de la longitud de número secuencias máxima(%)\n") +
ylab("\nLongitud de la secuencia\n") +
ggtitle(" Longitud de las secuencias creciente frente al aumento porcentual de la longitud\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
tiempo_longitud<-merge(estadi_longitud, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_longitud, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nLongitud de la secuencia \n")+
ggtitle("       Tiempo computacional creciente a mayor porcentaje de longitud de secuencia\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
#sd
ggplot(data = tiempo_longitud, aes(x=sd.x, y=value.y))+
geom_line()+
geom_point()+
ylab("\nTiempo (mean)\n") +
xlab("Longitud (sd)")
#Varianza
ggplot(data = tiempo_longitud, aes(x=var, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nVariabilidad porcentual de la longitud máxima de secuencias (%)\n") +
ggtitle("     Tiempo computacional creciente a mayor variabilidad porcentual de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
tiempo_score<-merge(estadi_score, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_score, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nScore (unidad arbitrária) \n")+
ggtitle("Tiempo computacional creciente frente a menores valores de score correspondientes al porcentaje de longitud de secuencias\n") +
theme( plot.title = element_text(color="black", size=8, face="bold.italic"))
View(tiempo_longitud)
View(datos_alineamientos_n)
library(jsonlite)
library(psych)
library(ggplot2)
# Ruta a la carpeta que contiene los archivos JSON
carpeta <- "Alineamientos"
# Obtener la lista de archivos en la carpeta
archivos <- list.files(path = carpeta, pattern = ".json", full.names = TRUE)
# Crear una tabla para almacenar los datos de los archivos JSON
datos_alineamientos <- data.frame()
# Iterar sobre cada archivo y leer su contenido JSON
for (archivo in archivos) {
# Leer el contenido del archivo JSON
contenido <- read_json(archivo)
contenido$Alineamiento$num <- length(contenido$Cadenas)
nuevos_datos_df <- as.data.frame(contenido$Alineamiento)
nuevos_datos_df$Data = list(unlist(lapply(contenido$Cadenas, function(x) x[[1]])))
datos_alineamientos<-rbind(nuevos_datos_df,datos_alineamientos)
}
datos_alineamientos_n <- datos_alineamientos[,c("Tiempo","Score","Long","num")]
esta_grup <- describeBy(datos_alineamientos_n,datos_alineamientos_n$num)
esta_grup
# Indexado Estadistico
# esta_grup_tiempo[["5"]][["sd"]]
generar_value_vector <- function(esta_grup,estadistico, lista,variable) {
# Crear un vector para almacenar los valores
value_vector <- numeric(length(lista))
j <-1
# Iterar desde 'start' hasta 'end'
for (i in lista) {
# Obtener el valor mean correspondiente
value_vector[j] <- esta_grup[[as.character(i)]][[estadistico]][variable]
j <-j+1
}
return(value_vector)
}
estadi_tiempo <- data.frame(
name=unique(datos_alineamientos_n$num),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$num),1),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$num),1)
)
estadi_tiempo<-estadi_tiempo[order(estadi_tiempo$name),]
ggplot(estadi_tiempo) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\nNúmero de secuencias\n") +
ylab("\nTiempo (seg)\n") +
ggtitle(" Tiempo de procesamiento computacional con el número de secuencias crecientes\n")+
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
estadi_score <- data.frame(
name=unique(datos_alineamientos_n$num),
value=generar_value_vector(esta_grup,"mean",unique(datos_alineamientos_n$num),2),
sd=generar_value_vector(esta_grup,"sd",unique(datos_alineamientos_n$num),2)
)
estadi_score <- estadi_score[order(estadi_score$name),]
ggplot(estadi_score) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5)+
xlab("\nNúmero de secuencias\n") +
ylab("\nScore (unidades arbitrarías)\n") +
ggtitle("       Baja varabilidad del score con diferentes números de secuencias\n") +
theme( plot.title = element_text(color="black", size=13, face="bold.italic"))
estadisticos_longitudes_cadenas <- lapply(unique(datos_alineamientos$Data), function(sublista) {
# Calcular promedio y desviación estándar de la sublista
promedio <- mean(sublista)
desviacion_estandar <- sd(sublista)
name <-length(sublista)
var <-var(sublista)
# Devolver el resultado como un data.frame
c(name,promedio,desviacion_estandar,var)
})
estadisticos_longitudes_cadenas <-do.call(rbind, estadisticos_longitudes_cadenas)
estadi_longitud <- data.frame(
name=estadisticos_longitudes_cadenas[,1],
value=estadisticos_longitudes_cadenas[,2],
sd=estadisticos_longitudes_cadenas[,3],
var=estadisticos_longitudes_cadenas[,4]
)
estadi_longitud <- estadi_longitud[order(estadi_longitud$name),]
ggplot(estadi_longitud) +
geom_bar( aes(x=name, y=value), stat="identity", fill="skyblue", alpha=0.7) +
geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour="orange", alpha=0.9, size=0.5) +
geom_text(aes(x=name, y=value, label=round(value,2)), vjust=-0.5) +
xlab("\nNúmero de secuencias\n") +
ylab("\nLongitud de la secuencia\n") +
ggtitle(" Longitud de secuencias poco significativa frente a diferentes números de secuencias\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
tiempo_longitud<-merge(estadi_longitud, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_longitud, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
ylab("Tiempo (mean)") +
xlab("Longitud (mean)")
#sd
ggplot(data = tiempo_longitud, aes(x=sd.x, y=value.y))+
geom_line()+
geom_point()+
ylab("Tiempo (mean)") +
xlab("Longitud (sd)")
#Varianza
ggplot(data = tiempo_longitud, aes(x=var, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nVariación de la longitud de secuencias\n") +
ggtitle("        Tendencia decreciente del tiempo a mayor variación de longitud de las secuencias\n") +
theme( plot.title = element_text(color="black", size=11, face="bold.italic"))
tiempo_score <-merge(estadi_score, estadi_tiempo, by = "name", all = TRUE)
# Gráfica de Tiempo medio vs Score media
ggplot(data = tiempo_score, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nTiempo (seg)\n") +
xlab("\nScore (unidades arbitrárias)\n") +
ggtitle("Tiempo computacional inversamente proporcional al score de diferentes números de secuencias\n") +
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
ggplot(data = tiempo_score, aes(x=value.x, y=sd.y))+
geom_line()+
geom_point()+
ylab("Tiempo (sd)") +
xlab("Score (mean)")
score_longitud<-merge(estadi_longitud, estadi_score, by = "name", all = TRUE)
ggplot(data = score_longitud, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
ylab("Score (mean)") +
xlab("Longitud (mean)")
#sd
ggplot(data = score_longitud, aes(x=sd.x, y=value.y))+
geom_line()+
geom_point()+
ylab("Score (mean)") +
xlab("Longitud (sd)")
#Varianza
ggplot(data = score_longitud, aes(x=var, y=value.y))+
geom_line()+
geom_point()+
geom_text(aes(label=name), vjust=-0.6, hjust=0) +
ylab("\nScore (unidad arbitrária)\n") +
xlab("\nVariabilidad de la longitud de secuencias\n") +
ggtitle("Incremento de la variabilidad de la longitud de secuencias frente a la tendencia creciente del score a\n") +
theme( plot.title = element_text(color="black", size=10, face="bold.italic"))
tiempo_score <-merge(estadi_score, estadi_tiempo, by = "name", all = TRUE)
ggplot(data = tiempo_score, aes(x=value.x, y=value.y))+
geom_line()+
geom_point()+
ylab("Tiempo (mean)") +
xlab("Score (mean)")
ggplot(data = tiempo_score, aes(x=value.x, y=sd.y))+
geom_line()+
geom_point()+
ylab("Tiempo (sd)") +
xlab("Score (mean)")
sum(datos_alineamientos$Tiempo)
